class Solution {
    private String superSequence(int[][] t, String s1, String s2) {
        int i = s1.length();
        int j = s2.length();
        StringBuilder s = new StringBuilder();
        while (i > 0 && j > 0) {
            if (s1.charAt(i - 1) == s2.charAt(j - 1)) {
                s.append(s1.charAt(i - 1));
                i--;
                j--;
            } else if (t[i - 1][j] >= t[i][j - 1]) {
                s.append(s1.charAt(i - 1));
                i--;
            } else {
                s.append(s2.charAt(j - 1));
                j--;
            }
        }
        while (i > 0) {
            s.append(s1.charAt(i - 1));
            i--;
        }
        while (j > 0) {
            s.append(s2.charAt(j - 1));
            j--;
        }
        return s.reverse().toString();
    }

    private String longestcommonsequence(String s1, String s2) {
        int m = s1.length();
        int n = s2.length();
        int[][] t = new int[m + 1][n + 1];
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (s1.charAt(i - 1) == s2.charAt(j - 1)) {
                    t[i][j] = 1 + t[i - 1][j - 1];
                } else {
                    t[i][j] = Math.max(t[i - 1][j], t[i][j - 1]);
                }
            }
        }
        return superSequence(t, s1, s2);
    }
    public String shortestCommonSupersequence(String str1, String str2) {
        return longestcommonsequence(str1, str2);
    }
}
