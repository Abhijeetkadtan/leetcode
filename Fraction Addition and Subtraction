class Solution {

    public int gcd(int a, int b) {
        if (b == 0)
            return a;
        return gcd(b, a % b);
    }

    public String fractionAddition(String expression) {
        int nume = 0;
        int deno = 1;

        int i = 0;
        while (i < expression.length()) {
            int currNume = 0;
            int currDeno = 0;

            boolean isNeg = (expression.charAt(i) == '-');
            if(expression.charAt(i) == '-' || expression.charAt(i) == '+'){
                i++;
            }
            while (i < expression.length() && Character.isDigit(expression.charAt(i))) {
                int val = expression.charAt(i) - '0';
                currNume = (currNume * 10) + val;
                i++;
            }
            i++;

            if (isNeg) {
                currNume *= -1;
            }

            while (i < expression.length() && Character.isDigit(expression.charAt(i))) {
                int val = expression.charAt(i) - '0';
                currDeno = (currDeno * 10) + val;
                i++;
            }

            nume = nume * currDeno + currNume * deno;
            deno = deno * currDeno;
        }

        int gcd = Math.abs(gcd(nume, deno));
        nume /= gcd;
        deno /= gcd;

        return Integer.toString(nume) + "/" + Integer.toString(deno);
    }
}
