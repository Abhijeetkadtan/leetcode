class Solution {
    public int maximumInvitations(int[] favorite) {
        int n=favorite.length,cycle=0,twoCycle=0;
        int[] indegree=new int[n];
        int[] depth=new int[n];
        for(int i=0;i<n;i++){
            indegree[favorite[i]]++;
            depth[i]++;
        } 
        Queue<Integer> q=new LinkedList<>();
        for(int i=0;i<n;i++) if(indegree[i]==0) q.offer(i);
        while(!q.isEmpty()){
            int curr=q.poll();
            int next=favorite[curr];
            depth[next]=Math.max(depth[next],depth[curr]+1);
            if(--indegree[next]==0) q.offer(next);
        }
        for(int i=0;i<n;i++){
            if(indegree[i]==0) continue;
            int cycleLength=0,curr=i;
            while(indegree[curr]!=0){
                indegree[curr]=0;
                cycleLength++;
                curr=favorite[curr];
            }
            if(cycleLength==2) twoCycle+=depth[i]+depth[favorite[i]];
            else cycle=Math.max(cycle,cycleLength);
        }
        return Math.max(cycle,twoCycle);
    }
}
