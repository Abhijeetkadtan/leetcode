class Solution {
    public int minDays(int[][] grid) {        
        if(DFS_call_func(grid) != 1)
            return 0;
        for(int i=0;i<grid.length;i++) {
            for(int j=0;j<grid[0].length;j++) {
                if(grid[i][j] == 1) {
                    grid[i][j] = 0;
                    if(DFS_call_func(grid) != 1)
                        return 1;
                    grid[i][j] = 1;
                }
            }
        }
        return 2;
    }
    public int DFS_call_func(int grid[][]) {
        int visited[][] = new int[grid.length][grid[0].length];
        int res=0;
        for(int i=0;i<grid.length;i++) {
            for(int j=0;j<grid[0].length;j++) {
                if(grid[i][j] == 1 && visited[i][j] == 0) {
                    helperDFS(grid, visited, i, j);
                    res++;
                }
            }
        }
        return res;
    }
    public void helperDFS(int[][] grid, int[][] visited, int i, int j) {
        if(i < 0 || j < 0 || i == grid.length || j == grid[0].length || grid[i][j] == 0 || visited[i][j] == 1)
            return;
        visited[i][j] = 1;
        helperDFS(grid, visited, i+1, j); 
        helperDFS(grid, visited, i, j+1);
        helperDFS(grid, visited, i-1, j);
        helperDFS(grid, visited, i, j-1);
    }
}
