class Solution {
    public int maxNumEdgesToRemove(int n, int[][] edges) {
        int[] bob_id = new int[n];
        int[] alice_id = new int[n];
        for(int i = 0; i<n;i++){
            bob_id[i] = i;
            alice_id[i] = i;
        }
        int bob_size = n;
        int alice_size = n;
        int res = 0;
        for(int[] edge : edges){
            if(edge[0]==3){
                // doesnt matter if it's bob_id or alice_id
                if(root(bob_id, edge[1]-1)!=root(bob_id,edge[2]-1)){
                union(bob_id,edge[1],edge[2]);
                union(alice_id,edge[1],edge[2]);
                bob_size--;
                alice_size--;
                }
                else{
                    res++;
                }
            }
        }
        for(int[] edge : edges){
            if(edge[0]!=3){
                    if(edge[0]==1){
                        if(root(alice_id,edge[1]-1)!=root(alice_id, edge[2]-1)){
                            union(alice_id,edge[1],edge[2]);
                            alice_size--;
                        }
                        else{
                            res++;
                        }
                    }
                    else{
                if(root(bob_id,edge[1]-1)!=root(bob_id, edge[2]-1)){
                            union(bob_id,edge[1],edge[2]);
                            bob_size--;
                        }
                        else{
                            res++;
                        }
                    }
            }
        }
        return (bob_size==1 && alice_size==1)?res:-1;
    }
    private int root(int[] id, int num){
        while(id[num]!=num){
            id[num] = id[id[num]];
            num = id[num];
        }
        return num;
    }
    private void union(int[] id, int a, int b){
        int rootA = root(id, a-1);
        int rootB = root(id, b-1);
            id[rootB] = rootA;
    }
}
